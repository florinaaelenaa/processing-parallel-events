/*
 *	Author:   Barbu Florina, 331AA
 *
 *  Theme:    Parallel Events Processing
 *  Language: Java Concurrent
 *  
 *  Date: 	  2016, 4th December 
 *
 */

 Preliminarii: 
 	Scopul  acestei  teme  este  implementarea  unui  sistem de  prelucrare paralelÄƒ  a  unor  evenimente provenind de la mai multe surse.
 	Asadar, dandu-se mai multe fisiere cu diferite informatii
 (timp, nume operatie aplicata supra unei valori, valoare) noi trebuie sa le parsam continutul si sa aplicam algoritmul specificat.
 
 
 Implementare: 
 	Modul in care functioneaza aplicatia consta in urmatoarele etape:
 *se prelucreaza argumentele din linia de comanda, din care vor rezulta numarul total de producatori de procese(nr de fisiere citite) si nr total de evenimente(nr de producatori x nr de evenimente din fiecare fisier)
 *se pornesc x thread-uri producatori, x reprezentand nr total de fisiere
 *fiecare thread producator gestioneaza propriul sau fisier, adica citeste pe rand fiecare linie, parseaza informatiile
 *dupa ce se obtin informatiile de pe o linie, asteapta timpul t(prima informatie), iar cu urmatoarele 2 informatii creeaza un obiect de tip event pe care il introduce in coada spre a fi prelucrat de consumatori
 *pe partea celalta, cat timp mai sunt evenimente de prelucrat
 (nr_evenimente > 0) si coada nu este goala, se da cate unui consumator un eveniment de prelucrat
 *consumator verifica care din algoritmii definiti ca metode proprii ai clasei sale trebuie apelat, prelucreaza N si rezultatul ii pune in vectorul de rezultate, corespunzator algoritmului
 *apoi se da shutdown pool-ului de consumatori, cand se termina de procesat toate evnimentele si join tuturor thread-urilor producatori
 *in final, se scriu in fisierele specifice, rezultatele din vectori, secvential


Structuri folosite:
- producatorii vor fi thread-uri care implementeaza interfata Runnable,
pentru a putea suprascrie metoda run
- consumatorii implementeaza si ei interfata runnable si vor fi introdusi
intr-un pool, de tipul Executorservice, notat s, si ales de dimensiune 4,
deoarece laptop-ul pe care am scris tema avea 4 core-uri logice
- task-urile sunt definite ca si clase, pentru a se putea instatia obiecte de tipul lor, ce vor avea ca si atribute name(algoritmul pe care trebuie sa-l rezolve) si N(nr primit prin linia de comanda)
- coada de task-uri este de tipul ArrayBlockingqueue (thread-safe), de dimensiunea primita ca parametru in linia de comanda
- vectorii in care scriu rezultatele sunt de tipul Vector<Integer> 
(thread-safe)